[
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi.params",
        "description": "fastapi.params",
        "isExtraImport": true,
        "detail": "fastapi.params",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "randrange",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "class Post(BaseModel):\n    title:str\n    content:str\n    Published: bool = True\n    rating: Optional[int] = None\nmy_posts = [{\"title\": \"title 1\",\"content\":\"content 1\", \"id\":1},{\"title\": \"title 2\",\"content\":\"content 2\",\"id\":2}]\ndef find_post(id):\n    for p in my_posts:\n        if p[\"id\"] == id:\n            return p",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "find_post",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def find_post(id):\n    for p in my_posts:\n        if p[\"id\"] == id:\n            return p\ndef find_index_post(id):\n    for i, p in enumerate(my_posts):\n        if p['id'] == id:\n            return i  \n#Getting All Posts\n@app.get(\"/posts\")",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "find_index_post",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def find_index_post(id):\n    for i, p in enumerate(my_posts):\n        if p['id'] == id:\n            return i  \n#Getting All Posts\n@app.get(\"/posts\")\ndef root():\n    return {\"data\": my_posts}\n#Create a Post\n@app.post(\"/posts\",status_code=status.HTTP_201_CREATED)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def root():\n    return {\"data\": my_posts}\n#Create a Post\n@app.post(\"/posts\",status_code=status.HTTP_201_CREATED)\ndef create_posts(post: Post):\n    post_dict = post.dict()\n    post_dict['id'] = randrange(0,1000000)\n    my_posts.append(post_dict)\n    return {\"data\": post_dict}\n#Get the latest post",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "create_posts",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def create_posts(post: Post):\n    post_dict = post.dict()\n    post_dict['id'] = randrange(0,1000000)\n    my_posts.append(post_dict)\n    return {\"data\": post_dict}\n#Get the latest post\n@app.get(\"/posts/latest\")\ndef get_post(id: int):\n    post = my_posts[len(my_posts)-1]\n    return {\"post-detail\": f\"{post}\"}",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "get_post",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def get_post(id: int):\n    post = my_posts[len(my_posts)-1]\n    return {\"post-detail\": f\"{post}\"}\n#Getting a post\n@app.get(\"/posts/{id}\")\ndef get_post(id: int, response = Response):\n    post = find_post(int(id))\n    if not post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"Post with {id} was not found\")",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "get_post",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def get_post(id: int, response = Response):\n    post = find_post(int(id))\n    if not post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"Post with {id} was not found\")\n        # response.status_code =status.HTTP_404_NOT_FOUND\n        # return {'message': f\"Post with {id} was not found\"}status.HTTP_404_NOT_FOUND\n    return {\"post-detail\": f\"{post}\"}\n@app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\ndef delete_post(id):",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def delete_post(id):\n    index = find_index_post(id)\n    if index == None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"post with id {id} does not exist\")\n    my_posts.pop(index)\n    return Response(status_code=status.HTTP_204_NO_CONTENT)\n#Updating a post\n@app.put(\"/posts/{id}\")\ndef update_post(id: int, post: Post):",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "update_post",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def update_post(id: int, post: Post):\n    index = find_index_post(id)\n    if index == None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                            detail=f\"post with id {id} does not exist\")\n    post_dict = post.dict()\n    post_dict['id'] = id\n    my_posts[index] = post_dict\n    return {\"data\": post_dict}",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\nclass Post(BaseModel):\n    title:str\n    content:str\n    Published: bool = True\n    rating: Optional[int] = None\nmy_posts = [{\"title\": \"title 1\",\"content\":\"content 1\", \"id\":1},{\"title\": \"title 2\",\"content\":\"content 2\",\"id\":2}]\ndef find_post(id):\n    for p in my_posts:\n        if p[\"id\"] == id:",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "my_posts",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "my_posts = [{\"title\": \"title 1\",\"content\":\"content 1\", \"id\":1},{\"title\": \"title 2\",\"content\":\"content 2\",\"id\":2}]\ndef find_post(id):\n    for p in my_posts:\n        if p[\"id\"] == id:\n            return p\ndef find_index_post(id):\n    for i, p in enumerate(my_posts):\n        if p['id'] == id:\n            return i  \n#Getting All Posts",
        "detail": "app.main",
        "documentation": {}
    }
]